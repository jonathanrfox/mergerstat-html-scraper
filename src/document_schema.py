import re

from .templates import SchemaTemplate, RecordTemplate
from .utils import Format


DOCUMENT_SCHEMA = (
    SchemaTemplate(
        find_method='label',
        ref_pat=None,
        records=(
            RecordTemplate(
                'target',
                re.compile(r'^TARGET.*'),
                Format.as_is
            ),
            RecordTemplate(
                'buyer',
                re.compile(r'^BUYER.*'),
                Format.as_is
            ),
            RecordTemplate(
                'announce_date',
                re.compile(r'^ANNOUNCE\sDATE.*'),
                Format.as_datetime
            ),
            RecordTemplate(
                'deal_no',
                re.compile(r'^DEAL\sNO.*'),
                Format.as_int
            )
        )
    ),
    SchemaTemplate(
        find_method='header',
        ref_pat=re.compile(r'.*TRANSACTION\sSUMMARY.*'),
        records=(
            RecordTemplate(
                key='deal_type',
                pat=re.compile(r'^Deal\sType.*'),
                fmt=Format.as_str
            ),
            RecordTemplate(
                key='purpose',
                pat=re.compile(r'^Purpose.*'),
                fmt=Format.as_str
            ),
            RecordTemplate(
                key='attitude',
                pat=re.compile(r'^Attitude.*'),
                fmt=Format.as_str
            ),
            RecordTemplate(
                key='transaction_type',
                pat=re.compile(r'^Transaction\sType.*'),
                fmt=Format.as_is
            ),
            RecordTemplate(
                key='cancelled_date',
                pat=re.compile(r'^Cancelled\sDate.*'),
                fmt=Format.as_datetime
            ),
            RecordTemplate(
                key='closing_date',
                pat=re.compile(r'^Closing\sDate.*'),
                fmt=Format.as_datetime
            ),
            RecordTemplate(
                key='deal_description',
                pat=re.compile(r'^Deal\sDescription.*'),
                fmt=Format.as_is
            ),
            RecordTemplate(
                key='transaction_notes',
                pat=re.compile(r'^Transaction\sNotes.*'),
                fmt=Format.as_is
            ),
            RecordTemplate(
                key='method_of_payment',
                pat=re.compile(r'^Method\sof\sPayment.*'),
                fmt=Format.as_str
            ),
            RecordTemplate(
                key='premium_offered',
                pat=re.compile(r'^Premium\sOffered.*'),
                fmt=Format.as_float
            ),
            RecordTemplate(
                key='percent_sought',
                pat=re.compile(r'^Percent\sSought.*'),
                fmt=Format.as_float
            ),
            RecordTemplate(
                key='share_price',
                pat=re.compile(r'^Share\sPrice.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='original_offer_price',
                pat=re.compile(r'^Original\sOffer\sPrice.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='price_earnings',
                pat=re.compile(r'^Price/Earnings.*'),
                fmt=Format.as_float
            ),
            RecordTemplate(
                key='multiple_of_book_value',
                pat=re.compile(r'^Multiple\sof\sBook\sValue.*'),
                fmt=Format.as_float
            ),
            RecordTemplate(
                key='stock_payment',
                pat=re.compile(r'^Stock\sPayment.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='cash_payment',
                pat=re.compile(r'^Cash\sPayment.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='liabilities_assumed',
                pat=re.compile(r'^Liabilities\sAssumed.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='total_invested_capital',
                pat=re.compile(r'^Total\sInvested\sCapital.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='stock_exchange_ratio',
                pat=re.compile(r'^Stock\sExchange\sRatio.*'),
                fmt=Format.as_float
            ),
            RecordTemplate(
                key='base_equity',
                pat=re.compile(r'^Base\sEquity\sPrice.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='seller_breakup_fee',
                pat=re.compile(r'^Seller\sBreakup\sFee.*'),
                fmt=Format.as_currency
            )
        )
    ),
    SchemaTemplate(
        find_method='header',
        ref_pat=re.compile(r'.*TARGET\sDETAILS.*'),
        records=(
            RecordTemplate(
                key='target_country',
                pat=re.compile(r'^Country.*'),
                fmt=Format.as_is
            ),
            RecordTemplate(
                key='target_exchange',
                pat=re.compile(r'^Exchange.*'),
                fmt=Format.as_is
            ),
            RecordTemplate(
                key='target_industry',
                pat=re.compile(r'^Industry.*'),
                fmt=Format.as_is
            )
        )
    ),
    SchemaTemplate(
        find_method='header',
        ref_pat=re.compile(r'.*BUYER\sDETAILS.*'),
        records=(
            RecordTemplate(
                key='buyer_legal_status',
                pat=re.compile(r'^Legal\sStatus.*'),
                fmt=Format.as_str
            ),
            RecordTemplate(
                key='buyer_primary_industry',
                pat=re.compile(r'^Primary\sIndustry.*'),
                fmt=Format.as_is
            ),
            RecordTemplate(
                key='buyer_exchange',
                pat=re.compile(r'^Exchange.*'),
                fmt=Format.as_is
            ),
            RecordTemplate(
                key='buyer_ticker',
                pat=re.compile(r'^Ticker.*'),
                fmt=Format.as_is
            )
        )
    ),
    SchemaTemplate(
        find_method='header',
        ref_pat=re.compile(r'.*SELLER\sDETAILS.*'),
        records=(
            RecordTemplate(
                key='target_ticker',
                pat=re.compile(r'^Ticker.*'),
                fmt=Format.as_is
            ),
        )
    ),
    SchemaTemplate(
        find_method='firstrow',
        ref_pat=re.compile(r'.*LATEST\sTWELVE\sMONTHS.*'),
        records=(
            RecordTemplate(
                key='ltm_units',
                pat=re.compile(r'^\('),
                fmt=Format.as_units
            ),
            RecordTemplate(
                key='ltm_revenue',
                pat=re.compile(r'^Revenue.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='ltm_net_income',
                pat=re.compile(r'^Net\sIncome.*'),
                fmt=Format.as_currency
            ),
        )
    ),
    SchemaTemplate(
        find_method='firstrow',
        ref_pat=re.compile(r'.*FINANCIAL\sSUMMARY.*'),
        records=(
            RecordTemplate(
                key='total_invested_capital_over_ebitda',
                pat=re.compile(r'^Total\sInvested\sCapital/EBITDA.*'),
                fmt=Format.as_float
            ),
            RecordTemplate(
                key='total_assets',
                pat=re.compile(r'^Total\sAssets.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='cash_and_marketable_securities',
                pat=re.compile(r'^Cash\sand\sMarketable\sSecurities.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='current_long_term_debt',
                pat=re.compile(r'^Current\sLong\sTerm\sDebt.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='long_term_debt',
                pat=re.compile(r'^Long-Term\sDebt.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='book_value',
                pat=re.compile(r'^Book\sValue.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='share_price_30_days_prior',
                pat=re.compile(r'^Share\sPrice\s30\sDays\sPrior.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='share_price_5_days_prior',
                pat=re.compile(r'^Share\sPrice\s5\sDays\sPrior.*'),
                fmt=Format.as_currency
            ),
            RecordTemplate(
                key='share_price_1_day_prior',
                pat=re.compile(r'^Share\sPrice\s1\sDay\sPrior.*'),
                fmt=Format.as_currency
            )
        )
    )
)
